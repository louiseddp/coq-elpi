theories/derive.vo: $(wildcard elpi/*.elpi)
theories/derive/bcongr.vo: elpi/bcongr.elpi
theories/derive/eqK.vo: elpi/eqK.elpi
theories/derive/eq.vo: elpi/eq.elpi
theories/derive/invert.vo: elpi/invert.elpi
theories/derive/param1_congr.vo: elpi/param1_congr.elpi
theories/derive/param1_trivial.vo: elpi/param1_trivial.elpi elpi/param1_inhab.elpi
theories/derive/projK.vo: elpi/projK.elpi
theories/derive/cast.vo: elpi/cast.elpi
theories/derive/eqOK_trivial.vo: elpi/eqOK_trivial.elpi
theories/derive/idx2inv.vo: elpi/idx2inv.elpi
theories/derive/isK.vo: elpi/isK.elpi
theories/derive/param1_functor.vo: elpi/param1_functor.elpi
theories/derive/param1.vo: elpi/param1.elpi elpi/paramX-lib.elpi
theories/derive/eqcorrect.vo: elpi/eqcorrect.elpi
theories/derive/eqOK.vo: elpi/eqOK.elpi
theories/derive/induction.vo: elpi/induction.elpi
theories/derive/map.vo: elpi/map.elpi
theories/derive/param2.vo: elpi/param2.elpi elpi/paramX-lib.elpi
theories/derive/lens.vo: elpi/lens.elpi
theories/derive/lens_laws.vo: elpi/lens_laws.elpi
theories/derive/tag.vo: elpi/tag.elpi
theories/derive/fields.vo: elpi/tag.elpi elpi/fields.elpi
theories/derive/eqb.vo: elpi/tag.elpi elpi/fields.elpi elpi/eqb.elpi
theories/derive/eqb.vo: elpi/tag.elpi elpi/fields.elpi elpi/eqb.elpi
theories/derive/eqbcorrect.vo : elpi/tag.elpi elpi/fields.elpi elpi/induction.elpi elpi/param1_inhab.elpi elpi/eqbcorrect.elpi 

coverage:
	@printf "====== %-10s\n" "test suite"
	@printf "inductives: %d\n" \
		`grep -E "^ *(Inductive|Variant)" tests/test_derive_stdlib.v 2>/dev/null| wc -l`
	@printf "records: %d\n" \
		`grep -E "^ *(Record|Structure)" tests/test_derive_stdlib.v 2>/dev/null| wc -l`
	@printf "definitions: %d\n" \
		`grep -E "^ *(Fixpoint|Definition)" tests/test_derive_stdlib.v 2>/dev/null| wc -l`
	@for F in $(wildcard theories/derive/*.v); do\
		D=`basename $$F .v`;\
		D_=`echo $$D | sed 's/_/./'`;\
		F=`mktemp`;\
		if [ -e tests/test_$${D}.v ]; then\
		  (cat tests/test_$${D}.v | awk ' /Module Coverage/ { p = 1 } /End Coverage/ { p = 0 } { if(p == 1) { print }} ' ) > $$F ;\
		  N=`grep -E "^(Fail )?Elpi derive.$$D_" $$F 2>/dev/null| wc -l`;\
		  OK=`grep -E "^Elpi derive.$$D_" $$F 2>/dev/null| wc -l`;\
		  printf "====== %-10s (%2d/%-2d)\n" tests/test_$${D}.v $$OK $$N;\
		  grep -E "^Fail Elpi derive.$$D_" $$F | grep -vi expected 2>/dev/null;\
		fi;\
	done || true

